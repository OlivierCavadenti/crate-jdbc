apply plugin: 'idea'
apply plugin: 'java'

version = '0.1.0'

repositories {
    mavenCentral()
}

dependencies {
    // needed by Version class
    compile 'org.apache.lucene:lucene-core:4.7.1'
    compile 'org.apache.lucene:lucene-analyzers-common:4.7.1'

    compile files('libs/crate-client.jar')

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.11'
    testCompile ('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.1') {
        exclude group: 'junit', module: 'junit'
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
        }
    }
}

ext {
    downloadDir = new File(rootDir, 'downloads')
    crate_version = '0.36.3'
}


def download (String url, String name){
    downloadDir.mkdirs()
    def dest = new File(downloadDir, name)
    ant.get(
            src: url,
            verbose: true,
            usetimestamp: true,
            skipexisting: true,
            dest: dest
    )
    return dest;
}

def extractTopfolder(File src, String trg){
    copy {
        includeEmptyDirs = false
        FileTree ft
        if(src.name.endsWith('.zip')) {
            ft = zipTree(src)
        }
        if(src.name.endsWith('.tar.gz')) {
            ft = tarTree(src)
        }
        from(ft) {
            eachFile { details ->
                details.path =
                        details.path.substring(details.relativePath.segments[0].length())
            }
        }
        into trg
    }
}

task downloadCrateRelease << {
    def dest = download(
            "https://cdn.crate.io/downloads/releases/crate-${crate_version}.tar.gz",
            "crate-${crate_version}.tar.gz")
    extractTopfolder(dest, 'parts/crate')
}


jar {
    baseName 'crate-client'
    caseSensitive true
    entryCompression ZipEntryCompression.DEFLATED
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes("Implementation-Title": "Crate Data Java Client", "Implementation-Version": version)
    }
}

task jarNoDeps (type: Jar) {
    baseName 'crate-client'
    manifest {
        attributes("Implementation-Title": "Crate Data Java Client", "Implementation-Version": version)
    }
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    dependsOn downloadCrateRelease
}

idea {
    project {
        languageLevel = 'JDK_1_7'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
